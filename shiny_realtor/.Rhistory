sum((df2$floorsize - mean(df2$floorsize))^2)
beta0 = mean(df2$soldPrice) - beta1*mean(df2$floorsize)
print(beta1)
print(beta0)
abline(beta0, beta1, lty = 2)
residuals = df2$soldPrice - (beta0 + beta1*df2$floorsize)
sum(residuals)
segments(df2$soldPrice, df2$soldPrice,
df2$soldPrice, (beta0 + beta1*df2$soldPrice),
col = "red")
text(df2$soldPrice - .5, df2$soldPrice, round(residuals, 2), cex = 0.5)
model = lm(soldPrice ~ floorsize, data = df2)
plot(df2, xlab = "floorsize", ylab = "sold price",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
summary(model)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
qqnorm(model$residuals)
qqline(model$residuals)
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
help(cars)
cars #Investigating the cars dataset.
summary(cars) #Five number summaries.
sapply(cars, sd) #Standard deviations.
cor(cars) #Correlations.
hist(cars$speed, xlab = "Speed in MPH", main = "Histogram of Speed")
hist(cars$dist, xlab = "Distance in Feet", main = "Histogram of Distance")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
beta1 = sum((cars$speed - mean(cars$speed)) * (cars$dist - mean(cars$dist))) /
sum((cars$speed - mean(cars$speed))^2)
beta0 = mean(cars$dist) - beta1*mean(cars$speed)
abline(beta0, beta1, lty = 2)
residuals = cars$dist - (beta0 + beta1*cars$speed)
sum(residuals)
segments(cars$speed, cars$dist,
cars$speed, (beta0 + beta1*cars$speed),
col = "red")
text(cars$speed - .5, cars$dist, round(residuals, 2), cex = 0.5)
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
summary(model) #All the summary information for the model in question. Reports:
model$fitted.values #Returns the fitted values.
newdata = data.frame(speed = c(15, 20, 25)) #Creating a new data frame to pass
predict(model, newdata )   #, interval = "confidence")
predict(model, newdata, interval = "confidence") #Construct confidence intervals
predict(model, newdata, interval = "prediction") #Construct prediction invervals
newdata = data.frame(speed = 4:25)
conf.band = predict(model, newdata, interval = "confidence")
pred.band = predict(model, newdata, interval = "prediction")
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2) #Plotting the regression line.
lines(newdata$speed, conf.band[, 2], col = "blue") #Plotting the lower confidence band.
lines(newdata$speed, conf.band[, 3], col = "blue") #Plotting the upper confidence band.
lines(newdata$speed, pred.band[, 2], col = "red") #Plotting the lower prediction band.
lines(newdata$speed, pred.band[, 3], col = "red") #Plotting the upper prediction band.
legend("topleft", c("Regression Line", "Conf. Band", "Pred. Band"),
lty = c(2, 1, 1), col = c("black", "blue", "red"))
library(dplyr)
pred.band
pred.band %>% as.data.frame() %>%  mutate(bandwidth = (upr - lwr))
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
dist.bc = (cars$dist^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(dist.bc ~ cars$speed) #Creating a new regression based on the
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
filter (lotsize >= 500 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df = data %>% filter (propertyType == 'Single Family Home') %>%
filter (soldPrice < 1500000) %>%
filter (floorsize >= 100 & floorsize <= 5000) %>%
filter (lotsize >= 500 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
g = ggplot(df, aes(x = floorsize , y = soldPrice))
g + geom_point (aes(x=floorsize, y= soldPrice), size=0.2, alpha =0.5) +
facet_wrap( ~ county,  nrow=2) +
geom_smooth(method=lm,se=FALSE) +  # Add linear regression line
theme(legend.position="bottom")
hist(df2$floorsize, xlab = "floorsize", main = "Histogram of floorsize")
hist(df2$soldPrice, xlab = "sold price", main = "Histogram of sold price")
plot(df2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset, Richmond County")
df = data %>% filter (propertyType == 'Single Family Home') %>%
filter (soldPrice < 1500000) %>%
filter (floorsize >= 1000 & floorsize <= 5000) %>%
filter (lotsize >= 3000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
g = ggplot(df, aes(x = floorsize , y = soldPrice))
g + geom_point (aes(x=floorsize, y= soldPrice), size=0.2, alpha =0.5) +
facet_wrap( ~ county,  nrow=2) +
geom_smooth(method=lm,se=FALSE) +  # Add linear regression line
theme(legend.position="bottom")
hist(df2$floorsize, xlab = "floorsize", main = "Histogram of floorsize")
hist(df2$soldPrice, xlab = "sold price", main = "Histogram of sold price")
plot(df2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset, Richmond County")
x1 = df2$floorsize
y1 = df2$soldPrice
y2 = y1^0.5
plot(x1,y1, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset transformed")
beta1 = sum((df2$floorsize - mean(df2$floorsize)) * (df2$soldPrice - mean(df2$soldPrice))) /
sum((df2$floorsize - mean(df2$floorsize))^2)
beta0 = mean(df2$soldPrice) - beta1*mean(df2$floorsize)
print(beta1)
print(beta0)
abline(beta0, beta1, lty = 2)
residuals = df2$soldPrice - (beta0 + beta1*df2$floorsize)
sum(residuals)
segments(df2$soldPrice, df2$soldPrice,
df2$soldPrice, (beta0 + beta1*df2$soldPrice),
col = "red")
text(df2$soldPrice - .5, df2$soldPrice, round(residuals, 2), cex = 0.5)
model = lm(soldPrice ~ floorsize, data = df2)
plot(df2, xlab = "floorsize", ylab = "sold price",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
summary(model)
df = data %>% filter (propertyType == 'Single Family Home') %>%
filter (soldPrice < 1500000) %>%
filter (floorsize >= 1000 & floorsize <= 10000) %>%
filter (lotsize >= 3000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
g = ggplot(df, aes(x = floorsize , y = soldPrice))
g + geom_point (aes(x=floorsize, y= soldPrice), size=0.2, alpha =0.5) +
facet_wrap( ~ county,  nrow=2) +
geom_smooth(method=lm,se=FALSE) +  # Add linear regression line
theme(legend.position="bottom")
hist(df2$floorsize, xlab = "floorsize", main = "Histogram of floorsize")
hist(df2$soldPrice, xlab = "sold price", main = "Histogram of sold price")
plot(df2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset, Richmond County")
x1 = df2$floorsize
y1 = df2$soldPrice
y2 = y1^0.5
plot(x1,y1, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset transformed")
beta1 = sum((df2$floorsize - mean(df2$floorsize)) * (df2$soldPrice - mean(df2$soldPrice))) /
sum((df2$floorsize - mean(df2$floorsize))^2)
beta0 = mean(df2$soldPrice) - beta1*mean(df2$floorsize)
print(beta1)
print(beta0)
abline(beta0, beta1, lty = 2)
residuals = df2$soldPrice - (beta0 + beta1*df2$floorsize)
sum(residuals)
segments(df2$soldPrice, df2$soldPrice,
df2$soldPrice, (beta0 + beta1*df2$soldPrice),
col = "red")
text(df2$soldPrice - .5, df2$soldPrice, round(residuals, 2), cex = 0.5)
model = lm(soldPrice ~ floorsize, data = df2)
plot(df2, xlab = "floorsize", ylab = "sold price",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
summary(model)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
qqnorm(model$residuals)
qqline(model$residuals)
library(car) #Companion to applied regression.
influencePlot(model)
influencePlot(model)
abline(model, lty = 2)
summary(model)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
qqnorm(model$residuals)
qqline(model$residuals)
library(car) #Companion to applied regression.
influencePlot(model)
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
price.bc = (df2$soldPrice^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(price.bc ~ df2$floorsize) #Creating a new regression based on the
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
filter (soldPrice < 1500000) %>%
filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 3000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
df = data %>% filter (propertyType == 'Single Family Home') %>%
filter (soldPrice < 1500000) %>%
filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 3000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
g = ggplot(df, aes(x = floorsize , y = soldPrice))
g + geom_point (aes(x=floorsize, y= soldPrice), size=0.2, alpha =0.5) +
facet_wrap( ~ county,  nrow=2) +
geom_smooth(method=lm,se=FALSE) +  # Add linear regression line
theme(legend.position="bottom")
hist(df2$floorsize, xlab = "floorsize", main = "Histogram of floorsize")
hist(df2$soldPrice, xlab = "sold price", main = "Histogram of sold price")
plot(df2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset, Richmond County")
df = data %>% filter # (propertyType == 'Single Family Home') %>%
filter (soldPrice < 1500000) %>%
filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 3000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
load('realtor_df.Rda')
data = dataset %>% filter(soldPrice >= 200000 & soldPrice <=2000000)
df = data %>% filter # (propertyType == 'Single Family Home') %>%
filter (soldPrice < 1500000) %>%
filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 3000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
df = data %>% #filter (propertyType == 'Single Family Home') %>%
filter (soldPrice < 1500000) %>%
filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 3000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
g = ggplot(df, aes(x = floorsize , y = soldPrice))
g + geom_point (aes(x=floorsize, y= soldPrice), size=0.2, alpha =0.5) +
facet_wrap( ~ county,  nrow=2) +
geom_smooth(method=lm,se=FALSE) +  # Add linear regression line
theme(legend.position="bottom")
hist(df2$floorsize, xlab = "floorsize", main = "Histogram of floorsize")
hist(df2$soldPrice, xlab = "sold price", main = "Histogram of sold price")
plot(df2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset, Richmond County")
plot(x1,y1, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset transformed")
x1 = df2$floorsize
y1 = df2$soldPrice
y2 = y1^0.5
plot(x1,y1, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset transformed")
plot(x1,y2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset transformed")
y2 = y1^-0.5
plot(x1,y2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset transformed")
beta1 = sum((df2$floorsize - mean(df2$floorsize)) * (df2$soldPrice - mean(df2$soldPrice))) /
sum((df2$floorsize - mean(df2$floorsize))^2)
beta0 = mean(df2$soldPrice) - beta1*mean(df2$floorsize)
print(beta1)
print(beta0)
abline(beta0, beta1, lty = 2)
residuals = df2$soldPrice - (beta0 + beta1*df2$floorsize)
plot(df2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset, Richmond County")
abline(beta0, beta1, lty = 2)
residuals = df2$soldPrice - (beta0 + beta1*df2$floorsize)
sum(residuals)
segments(df2$soldPrice, df2$soldPrice,
df2$soldPrice, (beta0 + beta1*df2$soldPrice),
col = "red")
text(df2$soldPrice - .5, df2$soldPrice, round(residuals, 2), cex = 0.5)
model = lm(soldPrice ~ floorsize, data = df2)
plot(df2, xlab = "floorsize", ylab = "sold price",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
summary(model)
load('realtor_df.Rda')
data = dataset %>% filter(soldPrice >= 200000 & soldPrice <=2000000)
load('realtor_df.Rda')
data = dataset %>% filter(soldPrice >= 200000 & soldPrice <=2000000)
df = data %>% #filter (propertyType == 'Single Family Home') %>%
#filter (soldPrice < 1500000) %>%
filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 1000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select (soldPrice, floorsize, lotsize, bedroom, bathroom, county, propertyType)
df2 = df # %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
g = ggplot(df, aes(x = floorsize , y = soldPrice))
g + geom_point (aes(x=floorsize, y= soldPrice), size=0.2, alpha =0.5) +
facet_wrap( ~ county,  nrow=2) +
geom_smooth(method=lm,se=FALSE) +  # Add linear regression line
theme(legend.position="bottom")
df2 = df  %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
df2 = df  %>% filter(county =='Richmond') %>% select(floorsize, soldPrice)
hist(df2$floorsize, xlab = "floorsize", main = "Histogram of floorsize")
hist(df2$soldPrice, xlab = "sold price", main = "Histogram of sold price")
plot(x1,y2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset transformed")
x1 = df2$floorsize
y1 = df2$soldPrice
y2 = y1^-0.5
plot(x1,y1, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset transformed")
beta1 = sum((df2$floorsize - mean(df2$floorsize)) * (df2$soldPrice - mean(df2$soldPrice))) /
sum((df2$floorsize - mean(df2$floorsize))^2)
beta0 = mean(df2$soldPrice) - beta1*mean(df2$floorsize)
print(beta1)
print(beta0)
abline(beta0, beta1, lty = 2)
plot(df2, xlab = "floor size", ylab = "sold price", #    , pch=19, cex= 0.5 ,
main = "Scatterplot of Realtor dataset, Richmond County")
abline(beta0, beta1, lty = 2)
sum(residuals)
segments(df2$soldPrice, df2$soldPrice,
df2$soldPrice, (beta0 + beta1*df2$soldPrice),
col = "red")
text(df2$soldPrice - .5, df2$soldPrice, round(residuals, 2), cex = 0.5)
model = lm(soldPrice ~ floorsize, data = df2)
plot(df2, xlab = "floorsize", ylab = "sold price",
main = "Scatterplot of Cars Dataset")
residuals = df2$soldPrice - (beta0 + beta1*df2$floorsize)
sum(residuals)
segments(df2$soldPrice, df2$soldPrice,
df2$soldPrice, (beta0 + beta1*df2$soldPrice),
col = "red")
text(df2$soldPrice - .5, df2$soldPrice, round(residuals, 2), cex = 0.5)
model = lm(soldPrice ~ floorsize, data = df2)
plot(df2, xlab = "floorsize", ylab = "sold price",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
summary(model)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
qqnorm(model$residuals)
qqline(model$residuals)
library(car) #Companion to applied regression.
influencePlot(model)
bc = boxCox(model) #Automatically plots a 95% confidence interval for the lambda
lambda = bc$x[which(bc$y == max(bc$y))] #Extracting the best lambda value.
price.bc = (df2$soldPrice^lambda - 1)/lambda #Applying the Box-Cox transformation.
model.bc = lm(price.bc ~ df2$floorsize) #Creating a new regression based on the
summary(model.bc) #Assessing the output of the new model.
plot(model.bc) #Assessing the assumptions of the new model.
newdata = data.frame(floorsize = c(1980, 1500, 1683))
predict(model, newdata )   #, interval = "confidence")
predict(model, newdata, interval = "confidence") #Construct confidence intervals
predict(model, newdata, interval = "prediction")
newdata = data.frame(floorsize = c(1980, 1500, 2683))
predict(model, newdata )   #, interval = "confidence")
new_dataset = read.csv('realtor_statenisland_predict.csv', stringsAsFactors = F) # for sold file
new_dataset = read.csv('data/realtor_statenisland_predict.csv', stringsAsFactors = F) # for sold file
head(new_dataset)
new_dataset = read.csv('file_all_single_pred_corrected.csv', stringsAsFactors = F) # for sold file
new_dataset = read.csv('data/file_all_single_pred_corrected.csv', stringsAsFactors = F) # for sold file
new_data_pred = data.frame(new_dataset$floorsize)
predict(model, new_data_pred )   #, interval = "confidence")
head(new_data_pred)
head(new_data_pred)
head(new_dataset)
new_data_pred = new_dataset %>% select(floorsize)
head(new_data_pred)
predict(model, new_data_pred )   #, interval = "confidence")
predict(model, new_data_pred, interval = "confidence") #Construct confidence intervals
predict(model, new_data_pred, interval = "prediction")
new_data_pred$predPrice = predict(model, new_data_pred )
new_data_pred$soldPrice = new_dataset$soldPrice
head(new_data_pred)
new_data_pred = new_data_pred %>% mutate(error = (predPrice - soldPrice)/soldPrice)
mean(new_data_pred$error)
mean(new_data_pred$error, rm.na=TRUE)
new_data_pred$error
new_data_pred
new_data_pred = new_dataset %>% filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 1000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 ) %>%
select(-soldPrice)
predict(model, new_data_pred )   #, interval = "confidence")
predict(model, new_data_pred, interval = "confidence") #Construct confidence intervals
predict(model, new_data_pred, interval = "prediction")
new_data_pred$soldPrice = new_dataset$soldPrice
new_data_pred$predPrice = predict(model, new_data_pred )
new_data_pred = new_data_pred %>% mutate(error = (predPrice - soldPrice)/soldPrice)
new_data_pred = new_dataset %>% filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 1000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 )
predict(model, new_data_pred )   #, interval = "confidence")
predict(model, new_data_pred, interval = "confidence") #Construct confidence intervals
predict(model, new_data_pred, interval = "prediction")
new_data_pred$soldPrice = new_dataset$soldPrice
new_data_pred = new_dataset %>% filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 1000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 )
predict(model, new_data_pred )   #, interval = "confidence")
predict(model, new_data_pred, interval = "confidence") #Construct confidence intervals
predict(model, new_data_pred, interval = "prediction")
new_data_pred$predPrice = predict(model, new_data_pred )
new_data_pred = new_data_pred %>% mutate(error = (predPrice - soldPrice)/soldPrice)
histogram(new_data_pred$error)
histogram(new_data_pred$error, bins = 30)
histogram(new_data_pred$error, bins = 10)
histogram(new_data_pred$error, breaks = 10)
histogram(new_data_pred$error, breaks = 30)
histogram(new_data_pred$error, breaks = 50)
histogram(new_data_pred$error, breaks = 50)
histogram(new_data_pred$error, breaks = 20)
histogram(new_data_pred$error, breaks = 30)
plot(new_data_pred$predPrice, new_data_pred$soldPrice )
g = ggplot(new_data_pred aes(x = soldPrice, y = predPrice))
g = ggplot(new_data_pred, aes(x = soldPrice, y = predPrice))
g + geom_smooth()
g = ggplot(new_data_pred, aes(x = soldPrice, y = predPrice))
g + geom_point() +
geom_smooth(mothed = "lm")
g + geom_point() +
geom_smooth(method = "lm")
g + geom_histogram(aes(x=error))
g1  = ggplot(new_data_pred, aes(x = error))
g1 + geom_histogram()
g1 + geom_histogram(bins = 30)
g1 + geom_histogram(bins = 30, color='white')
nrow(g1)
nrow(new_data_pred)
new_dataset = read.csv('data/file_all_single_pred_corrected.csv', stringsAsFactors = F) # for sold file
new_dataset$soldDate = as.Date(new_dataset$soldDate, '%Y-%m-%d')
unique(new_dataset$soldDate)
nrow(new_dataset)
new_data_pred = new_dataset %>% filter(soldDate > '2017-07-27') %>%
filter (floorsize >= 500 & floorsize <=5000) %>%
filter (lotsize >= 1000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 )
nrow(new_data_pred)
predict(model, new_data_pred )   #, interval = "confidence")
new_data_pred$predPrice = predict(model, new_data_pred )
new_data_pred = new_data_pred %>% mutate(error = (predPrice - soldPrice)/soldPrice)
histogram(new_data_pred$error, breaks = 30)
g = ggplot(new_data_pred, aes(x = soldPrice, y = predPrice))
g + geom_point() +
geom_smooth(method = "lm")
g1  = ggplot(new_data_pred, aes(x = error))
g1 + geom_histogram(bins = 30, color='white')
g1 + geom_histogram(color='white')
new_data_pred = new_dataset %>% filter(soldDate > '2017-07-27') %>%
filter (floorsize >= 0 & floorsize <=10000) %>%
filter (lotsize >= 0 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 )
nrow(new_data_pred)
new_data_pred = new_dataset %>% filter(soldDate > '2017-07-27') %>%
filter (floorsize >= 0 & floorsize <=10000) %>%
filter (lotsize >= 0 & lotsize <= 10000)
nrow(new_data_pred)
new_data_pred = new_dataset %>% filter(soldDate > '2017-07-27') %>%
filter (floorsize >= 500 & floorsize <=10000) %>%
filter (lotsize >= 1000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 )
head(new_data_pred)
tail(new_data_pred)
new_data_pred = new_dataset %>% filter(soldDate >='2017-07-27') %>%
filter (floorsize >= 500 & floorsize <=10000) %>%
filter (lotsize >= 1000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 )
predict(model, new_data_pred )   #, interval = "confidence")
new_data_pred$predPrice = predict(model, new_data_pred )
new_data_pred = new_data_pred %>% mutate(error = (predPrice - soldPrice)/soldPrice)
histogram(new_data_pred$error, breaks = 30)
g = ggplot(new_data_pred, aes(x = soldPrice, y = predPrice))
g + geom_point() +
geom_smooth(method = "lm")
g1  = ggplot(new_data_pred, aes(x = error))
g1 + geom_histogram(color='white')
g1 + geom_histogram(color='white', binwidth = 0.2)
new_data_pred = new_dataset %>% filter(soldDate > '2017-07-27') %>%
filter (floorsize >= 500 & floorsize <=10000) %>%
filter (lotsize >= 1000 & lotsize <= 10000) %>%
filter (bedroom >= 1 & bedroom <=5) %>%
filter (bathroom >= 1 & bathroom <=4 )
predict(model, new_data_pred )   #, interval = "confidence")
new_data_pred$predPrice = predict(model, new_data_pred )
new_data_pred = new_data_pred %>% mutate(error = (predPrice - soldPrice)/soldPrice)
histogram(new_data_pred$error, breaks = 30)
g = ggplot(new_data_pred, aes(x = soldPrice, y = predPrice))
g + geom_point() +
geom_smooth(method = "lm")
g1  = ggplot(new_data_pred, aes(x = error))
g1 + geom_histogram(color='white', binwidth = 0.2)
g1 + geom_histogram(color='white', binwidth = 0.3)
g1 + geom_histogram(color='white', binwidth = 0.25)
nrow(new_data_pred)
runApp()
runApp()
load('realtor_df.Rda')
data = dataset %>% filter(soldPrice >= 200000 & soldPrice <=2000000)
library(corrplot)
